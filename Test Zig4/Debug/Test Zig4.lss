
Test Zig4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf6  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf2  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bd  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000576  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	42 c0       	rjmp	.+132    	; 0x18c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#define bit_is_clear(sfr,bit) (!(_SFR_BYTE(sfr) & _BV(bit)))
#define bit_is_set(sfr,bit)   (_SFR_BYTE(sfr) & _BV(bit))
char data;
int main(void)
{
	DDRH |=(1<<LED1_G);
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	80 81       	ld	r24, Z
 110:	81 60       	ori	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	DDRG |= (1<<LED3_G);
 114:	9d 9a       	sbi	0x13, 5	; 19
	DDRE |=((1<<LED1_R)|(1<<LED2_G)|(1<<LED2_R));
 116:	8d b1       	in	r24, 0x0d	; 13
 118:	88 63       	ori	r24, 0x38	; 56
 11a:	8d b9       	out	0x0d, r24	; 13
	DDRF |=((1<<LED3_R)|(1<<LED4_G)|(1<<LED4_R));
 11c:	80 b3       	in	r24, 0x10	; 16
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	80 bb       	out	0x10, r24	; 16
			set_bit(LED1_PORT_G,LED1_G);
			clr_bit(LED1_PORT_R,LED1_R);
		}else
		{
			set_bit(LED1_PORT_R,LED1_R);
			clr_bit(LED1_PORT_G,LED1_G);
 122:	e2 e0       	ldi	r30, 0x02	; 2
 124:	f1 e0       	ldi	r31, 0x01	; 1
	DDRE |=((1<<LED1_R)|(1<<LED2_G)|(1<<LED2_R));
	DDRF |=((1<<LED3_R)|(1<<LED4_G)|(1<<LED4_R));
    /* Replace with your application code */
    while (1) 
    {
		data = SENSOR1_PORT_IN;
 126:	83 b1       	in	r24, 0x03	; 3
 128:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		if(data&(1<<SENSOR1_IN))
 12c:	85 ff       	sbrs	r24, 5
 12e:	05 c0       	rjmp	.+10     	; 0x13a <main+0x30>
		{
			set_bit(LED1_PORT_G,LED1_G);
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
			clr_bit(LED1_PORT_R,LED1_R);
 136:	75 98       	cbi	0x0e, 5	; 14
 138:	04 c0       	rjmp	.+8      	; 0x142 <main+0x38>
		}else
		{
			set_bit(LED1_PORT_R,LED1_R);
 13a:	75 9a       	sbi	0x0e, 5	; 14
			clr_bit(LED1_PORT_G,LED1_G);
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	80 83       	st	Z, r24
		}
		data = SENSOR2_PORT_IN;
 142:	83 b1       	in	r24, 0x03	; 3
 144:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		if(data&(1<<SENSOR2_IN))
 148:	86 ff       	sbrs	r24, 6
 14a:	03 c0       	rjmp	.+6      	; 0x152 <main+0x48>
		{
			set_bit(LED2_PORT_G,LED2_G);
 14c:	74 9a       	sbi	0x0e, 4	; 14
			clr_bit(LED2_PORT_R,LED2_R);
 14e:	73 98       	cbi	0x0e, 3	; 14
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0x4c>
		}else
		{
			set_bit(LED2_PORT_R,LED2_R);
 152:	73 9a       	sbi	0x0e, 3	; 14
			clr_bit(LED2_PORT_G,LED2_G);
 154:	74 98       	cbi	0x0e, 4	; 14
		}
		data = SENSOR3_PORT_IN;
 156:	83 b1       	in	r24, 0x03	; 3
 158:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		if(data&(1<<SENSOR3_IN))
 15c:	84 ff       	sbrs	r24, 4
 15e:	03 c0       	rjmp	.+6      	; 0x166 <main+0x5c>
		{
			set_bit(LED3_PORT_G,LED3_G);
 160:	a5 9a       	sbi	0x14, 5	; 20
			clr_bit(LED3_PORT_R,LED3_R);
 162:	88 98       	cbi	0x11, 0	; 17
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x60>
		}else
		{
			set_bit(LED3_PORT_R,LED3_R);
 166:	88 9a       	sbi	0x11, 0	; 17
			clr_bit(LED3_PORT_G,LED3_G);
 168:	a5 98       	cbi	0x14, 5	; 20
		}
		data = SENSOR4_PORT_IN;
 16a:	83 b1       	in	r24, 0x03	; 3
 16c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		if(data&(1<<SENSOR4_IN))
 170:	83 ff       	sbrs	r24, 3
 172:	03 c0       	rjmp	.+6      	; 0x17a <main+0x70>
		{
			set_bit(LED4_PORT_G,LED4_G);
 174:	89 9a       	sbi	0x11, 1	; 17
			clr_bit(LED4_PORT_R,LED4_R);
 176:	8a 98       	cbi	0x11, 2	; 17
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x74>
		}else
		{
			set_bit(LED4_PORT_R,LED4_R);
 17a:	8a 9a       	sbi	0x11, 2	; 17
			clr_bit(LED4_PORT_G,LED4_G);
 17c:	89 98       	cbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x78>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x7e>
 188:	00 00       	nop
 18a:	cd cf       	rjmp	.-102    	; 0x126 <main+0x1c>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
